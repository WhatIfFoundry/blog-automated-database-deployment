on:
  workflow_call:
    inputs:
      environment:
        required: true
        type: string
name: Deploy Application

env:
  DB_ADMIN_GROUP_NAME: DBAdmins_${{inputs.environment}}
  FIREWALL_RULE_NAME: GitHubAction_${{ inputs.environment }}_${{ github.run_number }}

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}
    steps:
      - id: get-build-version
        name: get-build-version
        uses: azure/cli@v1
        with:
          inlineScript: |
            echo build=$(printf "${{inputs.environment}}-%05g-%03g" ${{ github.run_number }} ${{ github.run_attempt }}) >> $GITHUB_OUTPUT

      - name: checkout
        uses: actions/checkout@main

      - name: azure-login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - id: setup-db-admin-group
        name: setup-db-admin-group
        uses: azure/cli@v1
        with:
          inlineScript: |
            adGroupObjectId=$(az ad group create --display-name ${{env.DB_ADMIN_GROUP_NAME}} --mail-nickname ${{env.DB_ADMIN_GROUP_NAME}} -o tsv --query id)
            currUserObjectId=$(az ad signed-in-user show --query id -o tsv)
            userExists=$(az ad group member check --group $adGroupObjectId --member-id $currUserObjectId -o tsv)
            if [ ${userExists,,} != 'true' ]
            then
                echo Adding user to group
                az ad group member add --group $adGroupObjectId --member-id $currUserObjectId
            fi
            echo "::add-mask::$adGroupObjectId"
            echo adGroupObjectId=$adGroupObjectId >> $GITHUB_OUTPUT

      - uses: azure/arm-deploy@v1
        id: azure-environment-setup
        name: azure-environment-setup
        with:
          scope: subscription
          deploymentName: wif-blog-aaes-${{ steps.get-build-version.outputs.build }}
          region: eastus2
          subscriptionId: ${{ secrets.AZURE_SUBSCRIPTION }}
          template: ./infrastructure/setup-subscription.bicep
          parameters: ./infrastructure/setup-subscription.parameters.${{ inputs.environment }}.json dbAdminPrincipalType='Group' dbAdminSID=${{steps.setup-db-admin-group.outputs.adGroupObjectId}} dbAdminLogin=${{env.DB_ADMIN_GROUP_NAME}}
          failOnStdErr: false

      - name: create-whitelist-ip-in-db-firewall
        id: create-whitelist-ip-in-db-firewall
        uses: azure/CLI@v1
        with:
          inlineScript: |
            set -eu
            agentIP=$(curl -s https://api.ipify.org/)
            az sql server firewall-rule create \
              --resource-group "${{ steps.azure-environment-setup.outputs.resourceGroupName }}" \
              --server "${{ steps.azure-environment-setup.outputs.dbServerName }}" \
              --name ${{ env.FIREWALL_RULE_NAME }} \
              --start-ip-address $agentIP \
              --end-ip-address $agentIP
            echo exit_code=0 >> $GITHUB_OUTPUT

      - name: run-database-migrations
        run: dotnet run --configuration Release -- -c 'Server=tcp:${{ steps.azure-environment-setup.outputs.dbServerName }}.database.windows.net;Authentication=Active Directory Default;Database=${{ steps.azure-environment-setup.outputs.dbInstanceName }}'
        working-directory: ./src/db

      - name: remove-whitelist-ip-in-db-firewall
        uses: azure/CLI@v1
        if: success() || steps.create-whitelist-ip-in-db-firewall.outputs.exit_code == 0
        with:
          inlineScript: |
            set -eu
            az sql server firewall-rule delete \
              --resource-group "${{ steps.azure-environment-setup.outputs.resourceGroupName }}" \
              --server "${{ steps.azure-environment-setup.outputs.dbServerName }}" \
              --name ${{ env.FIREWALL_RULE_NAME }}

      - name: install-npm-ui-packages
        run: npm install
        working-directory: ./src/ui

      - name: set-api-url
        run: sed -i 's|{API_URL}|${{ steps.azure-environment-setup.outputs.functionAppUrl }}|g' ./src/ui/.env.production

      - name: build-ui
        run: npm run build
        working-directory: ./src/ui

      - name: setup-dotnet
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: "7.0.x"

      - name: build-api
        run: dotnet build --configuration Release --output ./build
        working-directory: ./src/api

      - id: get-api-key
        name: get-api-key
        uses: azure/cli@v1
        with:
          inlineScript: |
            key=$(az staticwebapp secrets list --resource-group ${{ steps.azure-environment-setup.outputs.resourceGroupName }} --name ${{ steps.azure-environment-setup.outputs.staticWebsiteName }} --query "properties.apiKey" | tr -d '"')
            echo "::add-mask::$key"
            echo key=$key >> $GITHUB_OUTPUT

      - uses: Azure/static-web-apps-deploy@v1
        name: deploy-static-site
        with:
          skip_app_build: true
          azure_static_web_apps_api_token: ${{ steps.get-api-key.outputs.key }}
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          action: "upload"
          app_location: "src/ui/build"
          output_location: ""

      - uses: Azure/functions-action@v1
        name: "deploy-api"
        with:
          app-name: ${{ steps.azure-environment-setup.outputs.functionAppName }}
          package: "src/api/build"

      - name: create-git-tags
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          set -e
          gh api --method POST -H "Accept: application/vnd.github+json" -H "X-GitHub-Api-Version: 2022-11-28" /repos/${{ github.repository }}/git/refs -f ref='refs/tags/${{ steps.get-build-version.outputs.build }}' -f sha='${{ github.sha }}' 
          gh api --method DELETE -H "Accept: application/vnd.github+json" -H "X-GitHub-Api-Version: 2022-11-28" /repos/${{ github.repository }}/git/refs/tags/${{inputs.environment}}-curr || true
          gh api --method POST -H "Accept: application/vnd.github+json" -H "X-GitHub-Api-Version: 2022-11-28" /repos/${{ github.repository }}/git/refs -f ref='refs/tags/${{inputs.environment}}-curr' -f sha='${{ github.sha }}'
